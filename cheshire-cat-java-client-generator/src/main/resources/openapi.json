{
    "openapi": "3.1.0",
    "info": {
        "title": "ðŸ˜¸ Cheshire-Cat API",
        "description": "Production ready AI assistant framework",
        "version": "1.7.1",
        "x-logo": {
            "url": "https://cheshirecat.ai/wp-content/uploads/2023/10/Logo-Cheshire-Cat.svg"
        }
    },
    "paths": {
        "/": {
            "get": {
                "tags": [
                    "Status"
                ],
                "summary": "Home",
                "description": "Server status",
                "operationId": "home",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Home"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/message": {
            "post": {
                "tags": [
                    "Status"
                ],
                "summary": "Message With Cat",
                "description": "Get a response from the Cat",
                "operationId": "message_with_cat",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Payload",
                                "default": {
                                    "text": "hello!"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CatMessage"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/available-permissions": {
            "get": {
                "tags": [
                    "User Auth"
                ],
                "summary": "Get Available Permissions",
                "description": "Returns all available resources and permissions.",
                "operationId": "get_available_permissions",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "additionalProperties": {
                                        "items": {
                                            "$ref": "#/components/schemas/AuthPermission"
                                        },
                                        "type": "array"
                                    },
                                    "type": "object",
                                    "title": "Response Get Available Permissions"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/token": {
            "post": {
                "tags": [
                    "User Auth"
                ],
                "summary": "Auth Token",
                "description": "Endpoint called from client to get a JWT from local identity provider.\nThis endpoint receives username and password as form-data, validates credentials and issues a JWT.",
                "operationId": "auth_token",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserCredentials"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JWTResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Create User",
                "operationId": "create_user",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserCreate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Read Users",
                "operationId": "read_users",
                "parameters": [
                    {
                        "name": "skip",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 0,
                            "title": "Skip"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "title": "Limit"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/UserResponse"
                                    },
                                    "title": "Response Read Users"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/{user_id}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Read User",
                "operationId": "read_user",
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "User Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Users"
                ],
                "summary": "Update User",
                "operationId": "update_user",
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "User Id"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Users"
                ],
                "summary": "Delete User",
                "operationId": "delete_user",
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "User Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/settings/": {
            "get": {
                "tags": [
                    "Settings"
                ],
                "summary": "Get Settings",
                "description": "Get the entire list of settings available in the database",
                "operationId": "get_settings",
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "default": "",
                            "title": "Search"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Settings"
                ],
                "summary": "Create Setting",
                "description": "Create a new setting in the database",
                "operationId": "create_setting",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SettingBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/settings/{settingId}": {
            "get": {
                "tags": [
                    "Settings"
                ],
                "summary": "Get Setting",
                "description": "Get the a specific setting from the database",
                "operationId": "get_setting",
                "parameters": [
                    {
                        "name": "settingId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Settingid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Settings"
                ],
                "summary": "Update Setting",
                "description": "Update a specific setting in the database if it exists",
                "operationId": "update_setting",
                "parameters": [
                    {
                        "name": "settingId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Settingid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SettingBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Settings"
                ],
                "summary": "Delete Setting",
                "description": "Delete a specific setting in the database",
                "operationId": "delete_setting",
                "parameters": [
                    {
                        "name": "settingId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Settingid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/llm/settings": {
            "get": {
                "tags": [
                    "Large Language Model"
                ],
                "summary": "Get Llms Settings",
                "description": "Get the list of the Large Language Models",
                "operationId": "get_llms_settings",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Get Llms Settings"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/llm/settings/{languageModelName}": {
            "get": {
                "tags": [
                    "Large Language Model"
                ],
                "summary": "Get Llm Settings",
                "description": "Get settings and schema of the specified Large Language Model",
                "operationId": "get_llm_settings",
                "parameters": [
                    {
                        "name": "languageModelName",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Languagemodelname"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Get Llm Settings"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Large Language Model"
                ],
                "summary": "Upsert Llm Setting",
                "description": "Upsert the Large Language Model setting",
                "operationId": "upsert_llm_setting",
                "parameters": [
                    {
                        "name": "languageModelName",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Languagemodelname"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "default": {
                                    "openai_api_key": "your-key-here"
                                },
                                "title": "Payload"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Upsert Llm Setting"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/embedder/settings": {
            "get": {
                "tags": [
                    "Embedder"
                ],
                "summary": "Get Embedders Settings",
                "description": "Get the list of the Embedders",
                "operationId": "get_embedders_settings",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Get Embedders Settings"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/embedder/settings/{languageEmbedderName}": {
            "get": {
                "tags": [
                    "Embedder"
                ],
                "summary": "Get Embedder Settings",
                "description": "Get settings and schema of the specified Embedder",
                "operationId": "get_embedder_settings",
                "parameters": [
                    {
                        "name": "languageEmbedderName",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Languageembeddername"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Get Embedder Settings"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Embedder"
                ],
                "summary": "Upsert Embedder Setting",
                "description": "Upsert the Embedder setting",
                "operationId": "upsert_embedder_setting",
                "parameters": [
                    {
                        "name": "languageEmbedderName",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Languageembeddername"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "default": {
                                    "openai_api_key": "your-key-here"
                                },
                                "title": "Payload"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Upsert Embedder Setting"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/plugins/": {
            "get": {
                "tags": [
                    "Plugins"
                ],
                "summary": "Get Available Plugins",
                "description": "List available plugins",
                "operationId": "get_available_plugins",
                "parameters": [
                    {
                        "name": "query",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "title": "Query"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Get Available Plugins"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/plugins/upload": {
            "post": {
                "tags": [
                    "Plugins"
                ],
                "summary": "Install Plugin",
                "description": "Install a new plugin from a zip file",
                "operationId": "install_plugin",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_install_plugin"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Install Plugin"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/plugins/upload/registry": {
            "post": {
                "tags": [
                    "Plugins"
                ],
                "summary": "Install Plugin From Registry",
                "description": "Install a new plugin from registry",
                "operationId": "install_plugin_from_registry",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Payload",
                                "default": {
                                    "url": "https://github.com/plugin-dev-account/plugin-repo"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Install Plugin From Registry"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/plugins/toggle/{plugin_id}": {
            "put": {
                "tags": [
                    "Plugins"
                ],
                "summary": "Toggle Plugin",
                "description": "Enable or disable a single plugin",
                "operationId": "toggle_plugin",
                "parameters": [
                    {
                        "name": "plugin_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Plugin Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Toggle Plugin"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/plugins/settings": {
            "get": {
                "tags": [
                    "Plugins"
                ],
                "summary": "Get Plugins Settings",
                "description": "Returns the settings of all the plugins",
                "operationId": "get_plugins_settings",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Get Plugins Settings"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/plugins/settings/{plugin_id}": {
            "get": {
                "tags": [
                    "Plugins"
                ],
                "summary": "Get Plugin Settings",
                "description": "Returns the settings of a specific plugin",
                "operationId": "get_plugin_settings",
                "parameters": [
                    {
                        "name": "plugin_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Plugin Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Get Plugin Settings"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Plugins"
                ],
                "summary": "Upsert Plugin Settings",
                "description": "Updates the settings of a specific plugin",
                "operationId": "upsert_plugin_settings",
                "parameters": [
                    {
                        "name": "plugin_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Plugin Id"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "default": {
                                    "setting_a": "some value",
                                    "setting_b": "another value"
                                },
                                "title": "Payload"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Upsert Plugin Settings"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/plugins/{plugin_id}": {
            "get": {
                "tags": [
                    "Plugins"
                ],
                "summary": "Get Plugin Details",
                "description": "Returns information on a single plugin",
                "operationId": "get_plugin_details",
                "parameters": [
                    {
                        "name": "plugin_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Plugin Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Get Plugin Details"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Plugins"
                ],
                "summary": "Delete Plugin",
                "description": "Physically remove plugin.",
                "operationId": "delete_plugin",
                "parameters": [
                    {
                        "name": "plugin_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Plugin Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Delete Plugin"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/memory/recall": {
            "get": {
                "tags": [
                    "Memory"
                ],
                "summary": "Recall Memories From Text",
                "description": "Search k memories similar to given text.",
                "operationId": "recall_memories_from_text",
                "parameters": [
                    {
                        "name": "text",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "description": "Find memories similar to this text.",
                            "title": "Text"
                        },
                        "description": "Find memories similar to this text."
                    },
                    {
                        "name": "k",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "description": "How many memories to return.",
                            "default": 100,
                            "title": "K"
                        },
                        "description": "How many memories to return."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Recall Memories From Text"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/memory/collections": {
            "get": {
                "tags": [
                    "Memory"
                ],
                "summary": "Get Collections",
                "description": "Get list of available collections",
                "operationId": "get_collections",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Get Collections"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Memory"
                ],
                "summary": "Wipe Collections",
                "description": "Delete and create all collections",
                "operationId": "wipe_collections",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Wipe Collections"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/memory/collections/{collection_id}": {
            "delete": {
                "tags": [
                    "Memory"
                ],
                "summary": "Wipe Single Collection",
                "description": "Delete and recreate a collection",
                "operationId": "wipe_single_collection",
                "parameters": [
                    {
                        "name": "collection_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Collection Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Wipe Single Collection"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/memory/collections/{collection_id}/points": {
            "post": {
                "tags": [
                    "Memory"
                ],
                "summary": "Create Memory Point",
                "description": "Create a point in memory",
                "operationId": "create_memory_point",
                "parameters": [
                    {
                        "name": "collection_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Collection Id"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MemoryPointBase"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MemoryPoint"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Memory"
                ],
                "summary": "Delete Memory Points By Metadata",
                "description": "Delete points in memory by filter",
                "operationId": "delete_memory_points_by_metadata",
                "parameters": [
                    {
                        "name": "collection_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Collection Id"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "default": {},
                                "title": "Metadata"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Delete Memory Points By Metadata"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/memory/collections/{collection_id}/points/{point_id}": {
            "delete": {
                "tags": [
                    "Memory"
                ],
                "summary": "Delete Memory Point",
                "description": "Delete a specific point in memory",
                "operationId": "delete_memory_point",
                "parameters": [
                    {
                        "name": "collection_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Collection Id"
                        }
                    },
                    {
                        "name": "point_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Point Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Delete Memory Point"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/memory/conversation_history": {
            "get": {
                "tags": [
                    "Memory"
                ],
                "summary": "Get Conversation History",
                "description": "Get the specified user's conversation history from working memory",
                "operationId": "get_conversation_history",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Get Conversation History"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Memory"
                ],
                "summary": "Wipe Conversation History",
                "description": "Delete the specified user's conversation history from working memory",
                "operationId": "wipe_conversation_history",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Wipe Conversation History"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/rabbithole/": {
            "post": {
                "tags": [
                    "Rabbit Hole"
                ],
                "summary": "Upload File",
                "description": "Upload a file containing text (.txt, .md, .pdf, etc.). File content will be extracted and segmented into chunks.\nChunks will be then vectorized and stored into documents memory.\n\nNote\n----------\n`chunk_size`, `chunk_overlap` anad `metadata` must be passed as form data.\nThis is necessary because the HTTP protocol does not allow file uploads to be sent as JSON.\n\nExample\n----------\n```\ncontent_type = \"application/pdf\"\nfile_name = \"sample.pdf\"\nfile_path = f\"tests/mocks/{file_name}\"\nwith open(file_path, \"rb\") as f:\n    files = {\"file\": (file_name, f, content_type)}\n\n    metadata = {\n        \"source\": \"sample.pdf\",\n        \"title\": \"Test title\",\n        \"author\": \"Test author\",\n        \"year\": 2020,\n    }\n    # upload file endpoint only accepts form-encoded data\n    payload = {\n        \"chunk_size\": 128,\n        \"metadata\": json.dumps(metadata)\n    }\n\n    response = requests.post(\n        \"http://localhost:1865/rabbithole/\",\n        files=files,\n        data=payload\n    )\n```",
                "operationId": "upload_file",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_upload_file"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Upload File"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/rabbithole/web": {
            "post": {
                "tags": [
                    "Rabbit Hole"
                ],
                "summary": "Upload Url",
                "description": "Upload a url. Website content will be extracted and segmented into chunks.\nChunks will be then vectorized and stored into documents memory.",
                "operationId": "upload_url",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UploadURLConfig"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/rabbithole/memory": {
            "post": {
                "tags": [
                    "Rabbit Hole"
                ],
                "summary": "Upload Memory",
                "description": "Upload a memory json file to the cat memory",
                "operationId": "upload_memory",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_upload_memory"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Upload Memory"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/rabbithole/allowed-mimetypes": {
            "get": {
                "tags": [
                    "Rabbit Hole"
                ],
                "summary": "Get Allowed Mimetypes",
                "description": "Retrieve the allowed mimetypes that can be ingested by the Rabbit Hole",
                "operationId": "get_allowed_mimetypes",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Get Allowed Mimetypes"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth_handler/settings": {
            "get": {
                "tags": [
                    "AuthHandler"
                ],
                "summary": "Get Auth Handler Settings",
                "description": "Get the list of the AuthHandlers",
                "operationId": "get_auth_handler_settings",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Get Auth Handler Settings"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth_handler/settings/{auth_handler_name}": {
            "get": {
                "tags": [
                    "AuthHandler"
                ],
                "summary": "Get Auth Handler Setting",
                "description": "Get the settings of a specific AuthHandler",
                "operationId": "get_auth_handler_setting",
                "parameters": [
                    {
                        "name": "auth_handler_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Auth Handler Name"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Get Auth Handler Setting"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "AuthHandler"
                ],
                "summary": "Upsert Authenticator Setting",
                "description": "Upsert the settings of a specific AuthHandler",
                "operationId": "upsert_authenticator_setting",
                "parameters": [
                    {
                        "name": "auth_handler_name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Auth Handler Name"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "title": "Payload"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Upsert Authenticator Setting"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "AuthPermission": {
                "type": "string",
                "enum": [
                    "WRITE",
                    "EDIT",
                    "LIST",
                    "READ",
                    "DELETE"
                ],
                "title": "AuthPermission"
            },
            "AuthResource": {
                "type": "string",
                "enum": [
                    "STATUS",
                    "MEMORY",
                    "CONVERSATION",
                    "SETTINGS",
                    "LLM",
                    "EMBEDDER",
                    "AUTH_HANDLER",
                    "USERS",
                    "UPLOAD",
                    "PLUGINS",
                    "STATIC"
                ],
                "title": "AuthResource"
            },
            "Body_install_plugin": {
                "properties": {
                    "file": {
                        "type": "string",
                        "format": "binary",
                        "title": "File"
                    }
                },
                "type": "object",
                "required": [
                    "file"
                ],
                "title": "Body_install_plugin"
            },
            "Body_upload_file": {
                "properties": {
                    "file": {
                        "type": "string",
                        "format": "binary",
                        "title": "File"
                    },
                    "chunk_size": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Chunk Size",
                        "description": "Maximum length of each chunk after the document is split (in tokens)"
                    },
                    "chunk_overlap": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Chunk Overlap",
                        "description": "Chunk overlap (in tokens)"
                    },
                    "metadata": {
                        "type": "string",
                        "title": "Metadata",
                        "description": "Metadata to be stored with each chunk (e.g. author, category, etc.). Since we are passing this along side form data, must be a JSON string (use `json.dumps(metadata)`).",
                        "default": "{}"
                    }
                },
                "type": "object",
                "required": [
                    "file"
                ],
                "title": "Body_upload_file"
            },
            "Body_upload_memory": {
                "properties": {
                    "file": {
                        "type": "string",
                        "format": "binary",
                        "title": "File"
                    }
                },
                "type": "object",
                "required": [
                    "file"
                ],
                "title": "Body_upload_memory"
            },
            "CatMessage": {
                "properties": {
                    "content": {
                        "type": "string",
                        "title": "Content"
                    },
                    "user_id": {
                        "type": "string",
                        "title": "User Id"
                    },
                    "type": {
                        "type": "string",
                        "title": "Type",
                        "default": "chat"
                    },
                    "why": {
                        "anyOf": [
                            {
                                "$ref": "#/components/schemas/MessageWhy"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "additionalProperties": true,
                "type": "object",
                "required": [
                    "content",
                    "user_id"
                ],
                "title": "CatMessage",
                "description": "Class for wrapping cat message\n\nVariables:\n    content (str): cat message\n    user_id (str): user id"
            },
            "EmbedderModelInteraction": {
                "properties": {
                    "model_type": {
                        "const": "embedder",
                        "title": "Model Type",
                        "default": "embedder"
                    },
                    "source": {
                        "type": "string",
                        "title": "Source",
                        "default": "recall"
                    },
                    "prompt": {
                        "type": "string",
                        "title": "Prompt"
                    },
                    "input_tokens": {
                        "type": "integer",
                        "title": "Input Tokens"
                    },
                    "started_at": {
                        "type": "number",
                        "title": "Started At"
                    },
                    "reply": {
                        "items": {
                            "type": "number"
                        },
                        "type": "array",
                        "title": "Reply"
                    }
                },
                "type": "object",
                "required": [
                    "prompt",
                    "input_tokens",
                    "reply"
                ],
                "title": "EmbedderModelInteraction"
            },
            "HTTPValidationError": {
                "properties": {
                    "detail": {
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        },
                        "type": "array",
                        "title": "Detail"
                    }
                },
                "type": "object",
                "title": "HTTPValidationError"
            },
            "JWTResponse": {
                "properties": {
                    "access_token": {
                        "type": "string",
                        "title": "Access Token"
                    },
                    "token_type": {
                        "type": "string",
                        "title": "Token Type",
                        "default": "bearer"
                    }
                },
                "type": "object",
                "required": [
                    "access_token"
                ],
                "title": "JWTResponse"
            },
            "LLMModelInteraction": {
                "properties": {
                    "model_type": {
                        "const": "llm",
                        "title": "Model Type",
                        "default": "llm"
                    },
                    "source": {
                        "type": "string",
                        "title": "Source"
                    },
                    "prompt": {
                        "type": "string",
                        "title": "Prompt"
                    },
                    "input_tokens": {
                        "type": "integer",
                        "title": "Input Tokens"
                    },
                    "started_at": {
                        "type": "number",
                        "title": "Started At"
                    },
                    "reply": {
                        "type": "string",
                        "title": "Reply"
                    },
                    "output_tokens": {
                        "type": "integer",
                        "title": "Output Tokens"
                    },
                    "ended_at": {
                        "type": "number",
                        "title": "Ended At"
                    }
                },
                "type": "object",
                "required": [
                    "source",
                    "prompt",
                    "input_tokens",
                    "reply",
                    "output_tokens",
                    "ended_at"
                ],
                "title": "LLMModelInteraction"
            },
            "MemoryPoint": {
                "properties": {
                    "content": {
                        "type": "string",
                        "title": "Content"
                    },
                    "metadata": {
                        "type": "string",
                        "title": "Metadata",
                        "default": "{}"
                    },
                    "id": {
                        "type": "string",
                        "title": "Id"
                    },
                    "vector": {
                        "items": {
                            "type": "number"
                        },
                        "type": "array",
                        "title": "Vector"
                    }
                },
                "type": "object",
                "required": [
                    "content",
                    "id",
                    "vector"
                ],
                "title": "MemoryPoint"
            },
            "MemoryPointBase": {
                "properties": {
                    "content": {
                        "type": "string",
                        "title": "Content"
                    },
                    "metadata": {
                        "type": "string",
                        "title": "Metadata",
                        "default": "{}"
                    }
                },
                "type": "object",
                "required": [
                    "content"
                ],
                "title": "MemoryPointBase"
            },
            "MessageWhy": {
                "properties": {
                    "input": {
                        "type": "string",
                        "title": "Input"
                    },
                    "intermediate_steps": {
                        "items": {},
                        "type": "array",
                        "title": "Intermediate Steps"
                    },
                    "memory": {
                        "type": "object",
                        "title": "Memory"
                    },
                    "model_interactions": {
                        "items": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/LLMModelInteraction"
                                },
                                {
                                    "$ref": "#/components/schemas/EmbedderModelInteraction"
                                }
                            ]
                        },
                        "type": "array",
                        "title": "Model Interactions"
                    }
                },
                "additionalProperties": true,
                "type": "object",
                "required": [
                    "input",
                    "intermediate_steps",
                    "memory",
                    "model_interactions"
                ],
                "title": "MessageWhy",
                "description": "Class for wrapping message why\n\nVariables:\n    input (str): input message\n    intermediate_steps (List): intermediate steps\n    memory (dict): memory\n    model_interactions (List[LLMModelInteraction | EmbedderModelInteraction]): model interactions"
            },
            "SettingBody": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name"
                    },
                    "value": {
                        "anyOf": [
                            {
                                "type": "object"
                            },
                            {
                                "items": {},
                                "type": "array"
                            }
                        ],
                        "title": "Value"
                    },
                    "category": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Category"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "value"
                ],
                "title": "SettingBody"
            },
            "UploadURLConfig": {
                "properties": {
                    "url": {
                        "type": "string",
                        "title": "Url",
                        "description": "URL of the website to which you want to save the content"
                    },
                    "chunk_size": {
                        "anyOf": [
                            {
                                "type": "integer"
                            }
                        ],
                        "title": "Chunk Size",
                        "description": "Maximum length of each chunk after the document is split (in tokens)"
                    },
                    "chunk_overlap": {
                        "anyOf": [
                            {
                                "type": "integer"
                            }
                        ],
                        "title": "Chunk Overlap",
                        "description": "Chunk overlap (in tokens)"
                    },
                    "metadata": {
                        "type": "string",
                        "title": "Metadata",
                        "description": "Metadata to be stored with each chunk (e.g. author, category, etc.)",
                        "default": "{}"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "url"
                ],
                "title": "UploadURLConfig"
            },
            "UserCreate": {
                "properties": {
                    "username": {
                        "type": "string",
                        "minLength": 2,
                        "title": "Username"
                    },
                    "permissions": {
                        "additionalProperties": {
                            "items": {
                                "$ref": "#/components/schemas/AuthPermission"
                            },
                            "type": "array"
                        },
                        "type": "object",
                        "title": "Permissions",
                        "default": {
                            "CONVERSATION": [
                                "WRITE",
                                "EDIT",
                                "LIST",
                                "READ",
                                "DELETE"
                            ],
                            "MEMORY": [
                                "READ",
                                "LIST"
                            ],
                            "STATIC": [
                                "READ"
                            ],
                            "STATUS": [
                                "READ"
                            ]
                        }
                    },
                    "password": {
                        "type": "string",
                        "minLength": 5,
                        "title": "Password"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "required": [
                    "username",
                    "password"
                ],
                "title": "UserCreate"
            },
            "UserCredentials": {
                "properties": {
                    "username": {
                        "type": "string",
                        "title": "Username"
                    },
                    "password": {
                        "type": "string",
                        "title": "Password"
                    }
                },
                "type": "object",
                "required": [
                    "username",
                    "password"
                ],
                "title": "UserCredentials"
            },
            "UserResponse": {
                "properties": {
                    "username": {
                        "type": "string",
                        "minLength": 2,
                        "title": "Username"
                    },
                    "permissions": {
                        "additionalProperties": {
                            "items": {
                                "$ref": "#/components/schemas/AuthPermission"
                            },
                            "type": "array"
                        },
                        "type": "object",
                        "title": "Permissions",
                        "default": {
                            "CONVERSATION": [
                                "WRITE",
                                "EDIT",
                                "LIST",
                                "READ",
                                "DELETE"
                            ],
                            "MEMORY": [
                                "READ",
                                "LIST"
                            ],
                            "STATIC": [
                                "READ"
                            ],
                            "STATUS": [
                                "READ"
                            ]
                        }
                    },
                    "id": {
                        "type": "string",
                        "title": "Id"
                    }
                },
                "type": "object",
                "required": [
                    "username",
                    "id"
                ],
                "title": "UserResponse"
            },
            "UserUpdate": {
                "properties": {
                    "username": {
                        "type": "string",
                        "minLength": 2,
                        "title": "Username"
                    },
                    "permissions": {
                        "additionalProperties": {
                            "items": {
                                "$ref": "#/components/schemas/AuthPermission"
                            },
                            "type": "array"
                        },
                        "type": "object",
                        "title": "Permissions"
                    },
                    "password": {
                        "type": "string",
                        "minLength": 4,
                        "title": "Password"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "title": "UserUpdate"
            },
            "ValidationError": {
                "properties": {
                    "loc": {
                        "items": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer"
                                }
                            ]
                        },
                        "type": "array",
                        "title": "Location"
                    },
                    "msg": {
                        "type": "string",
                        "title": "Message"
                    },
                    "type": {
                        "type": "string",
                        "title": "Error Type"
                    }
                },
                "type": "object",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "title": "ValidationError"
            }
        }
    }
}
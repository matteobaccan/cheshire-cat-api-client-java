openapi: 3.1.0
info:
  description: Production ready AI assistant framework
  title: ðŸ˜¸ Cheshire-Cat API
  version: 1.6.1
  x-logo:
    url: https://cheshirecat.ai/wp-content/uploads/2023/10/Logo-Cheshire-Cat.svg
servers:
- url: /
paths:
  /:
    get:
      description: Server status
      operationId: home
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Home
                type: object
          description: Successful Response
      summary: Home
      tags:
      - Status
      x-accepts:
      - application/json
  /message:
    post:
      description: Get a response from the Cat
      operationId: message_with_cat
      requestBody:
        content:
          application/json:
            schema:
              default:
                text: hello!
              title: Payload
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Message With Cat
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Message With Cat
      tags:
      - Status
      x-content-type: application/json
      x-accepts:
      - application/json
  /settings/:
    get:
      description: Get the entire list of settings available in the database
      operationId: get_settings
      parameters:
      - explode: true
        in: query
        name: search
        required: false
        schema:
          default: ""
          title: Search
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Settings
      tags:
      - Settings
      x-accepts:
      - application/json
    post:
      description: Create a new setting in the database
      operationId: create_setting
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SettingBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Create Setting
      tags:
      - Settings
      x-content-type: application/json
      x-accepts:
      - application/json
  /settings/{settingId}:
    delete:
      description: Delete a specific setting in the database
      operationId: delete_setting
      parameters:
      - explode: false
        in: path
        name: settingId
        required: true
        schema:
          title: Settingid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Delete Setting
      tags:
      - Settings
      x-accepts:
      - application/json
    get:
      description: Get the a specific setting from the database
      operationId: get_setting
      parameters:
      - explode: false
        in: path
        name: settingId
        required: true
        schema:
          title: Settingid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Setting
      tags:
      - Settings
      x-accepts:
      - application/json
    put:
      description: Update a specific setting in the database if it exists
      operationId: update_setting
      parameters:
      - explode: false
        in: path
        name: settingId
        required: true
        schema:
          title: Settingid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SettingBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Update Setting
      tags:
      - Settings
      x-content-type: application/json
      x-accepts:
      - application/json
  /llm/settings:
    get:
      description: Get the list of the Large Language Models
      operationId: get_llms_settings
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Get Llms Settings
                type: object
          description: Successful Response
      summary: Get Llms Settings
      tags:
      - Large Language Model
      x-accepts:
      - application/json
  /llm/settings/{languageModelName}:
    get:
      description: Get settings and schema of the specified Large Language Model
      operationId: get_llm_settings
      parameters:
      - explode: false
        in: path
        name: languageModelName
        required: true
        schema:
          title: Languagemodelname
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Get Llm Settings
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Llm Settings
      tags:
      - Large Language Model
      x-accepts:
      - application/json
    put:
      description: Upsert the Large Language Model setting
      operationId: upsert_llm_setting
      parameters:
      - explode: false
        in: path
        name: languageModelName
        required: true
        schema:
          title: Languagemodelname
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              default:
                openai_api_key: your-key-here
              title: Payload
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Upsert Llm Setting
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Upsert Llm Setting
      tags:
      - Large Language Model
      x-content-type: application/json
      x-accepts:
      - application/json
  /embedder/settings:
    get:
      description: Get the list of the Embedders
      operationId: get_embedders_settings
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Get Embedders Settings
                type: object
          description: Successful Response
      summary: Get Embedders Settings
      tags:
      - Embedder
      x-accepts:
      - application/json
  /embedder/settings/{languageEmbedderName}:
    get:
      description: Get settings and schema of the specified Embedder
      operationId: get_embedder_settings
      parameters:
      - explode: false
        in: path
        name: languageEmbedderName
        required: true
        schema:
          title: Languageembeddername
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Get Embedder Settings
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Embedder Settings
      tags:
      - Embedder
      x-accepts:
      - application/json
    put:
      description: Upsert the Embedder setting
      operationId: upsert_embedder_setting
      parameters:
      - explode: false
        in: path
        name: languageEmbedderName
        required: true
        schema:
          title: Languageembeddername
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              default:
                openai_api_key: your-key-here
              title: Payload
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Upsert Embedder Setting
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Upsert Embedder Setting
      tags:
      - Embedder
      x-content-type: application/json
      x-accepts:
      - application/json
  /plugins/:
    get:
      description: List available plugins
      operationId: get_available_plugins
      parameters:
      - explode: true
        in: query
        name: query
        required: false
        schema:
          title: Query
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Get Available Plugins
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Available Plugins
      tags:
      - Plugins
      x-accepts:
      - application/json
  /plugins/upload:
    post:
      description: Install a new plugin from a zip file
      operationId: install_plugin
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Body_install_plugin'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Install Plugin
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Install Plugin
      tags:
      - Plugins
      x-content-type: multipart/form-data
      x-accepts:
      - application/json
  /plugins/upload/registry:
    post:
      description: Install a new plugin from registry
      operationId: install_plugin_from_registry
      requestBody:
        content:
          application/json:
            schema:
              default:
                url: https://github.com/plugin-dev-account/plugin-repo
              title: Payload
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Install Plugin From Registry
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Install Plugin From Registry
      tags:
      - Plugins
      x-content-type: application/json
      x-accepts:
      - application/json
  /plugins/toggle/{plugin_id}:
    put:
      description: Enable or disable a single plugin
      operationId: toggle_plugin
      parameters:
      - explode: false
        in: path
        name: plugin_id
        required: true
        schema:
          title: Plugin Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Toggle Plugin
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Toggle Plugin
      tags:
      - Plugins
      x-accepts:
      - application/json
  /plugins/settings:
    get:
      description: Returns the settings of all the plugins
      operationId: get_plugins_settings
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Get Plugins Settings
                type: object
          description: Successful Response
      summary: Get Plugins Settings
      tags:
      - Plugins
      x-accepts:
      - application/json
  /plugins/settings/{plugin_id}:
    get:
      description: Returns the settings of a specific plugin
      operationId: get_plugin_settings
      parameters:
      - explode: false
        in: path
        name: plugin_id
        required: true
        schema:
          title: Plugin Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Get Plugin Settings
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Plugin Settings
      tags:
      - Plugins
      x-accepts:
      - application/json
    put:
      description: Updates the settings of a specific plugin
      operationId: upsert_plugin_settings
      parameters:
      - explode: false
        in: path
        name: plugin_id
        required: true
        schema:
          title: Plugin Id
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              default:
                setting_a: some value
                setting_b: another value
              title: Payload
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Upsert Plugin Settings
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Upsert Plugin Settings
      tags:
      - Plugins
      x-content-type: application/json
      x-accepts:
      - application/json
  /plugins/{plugin_id}:
    delete:
      description: Physically remove plugin.
      operationId: delete_plugin
      parameters:
      - explode: false
        in: path
        name: plugin_id
        required: true
        schema:
          title: Plugin Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Delete Plugin
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Delete Plugin
      tags:
      - Plugins
      x-accepts:
      - application/json
    get:
      description: Returns information on a single plugin
      operationId: get_plugin_details
      parameters:
      - explode: false
        in: path
        name: plugin_id
        required: true
        schema:
          title: Plugin Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Get Plugin Details
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Plugin Details
      tags:
      - Plugins
      x-accepts:
      - application/json
  /memory/recall:
    get:
      description: Search k memories similar to given text.
      operationId: recall_memories_from_text
      parameters:
      - description: Find memories similar to this text.
        explode: true
        in: query
        name: text
        required: true
        schema:
          description: Find memories similar to this text.
          title: Text
          type: string
        style: form
      - description: How many memories to return.
        explode: true
        in: query
        name: k
        required: false
        schema:
          default: 100
          description: How many memories to return.
          title: K
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Recall Memories From Text
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Recall Memories From Text
      tags:
      - Memory
      x-accepts:
      - application/json
  /memory/collections:
    delete:
      description: Delete and create all collections
      operationId: wipe_collections
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Wipe Collections
                type: object
          description: Successful Response
      summary: Wipe Collections
      tags:
      - Memory
      x-accepts:
      - application/json
    get:
      description: Get list of available collections
      operationId: get_collections
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Get Collections
                type: object
          description: Successful Response
      summary: Get Collections
      tags:
      - Memory
      x-accepts:
      - application/json
  /memory/collections/{collection_id}:
    delete:
      description: Delete and recreate a collection
      operationId: wipe_single_collection
      parameters:
      - explode: false
        in: path
        name: collection_id
        required: true
        schema:
          title: Collection Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Wipe Single Collection
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Wipe Single Collection
      tags:
      - Memory
      x-accepts:
      - application/json
  /memory/collections/{collection_id}/points/{memory_id}:
    delete:
      description: Delete a specific point in memory
      operationId: wipe_memory_point
      parameters:
      - explode: false
        in: path
        name: collection_id
        required: true
        schema:
          title: Collection Id
          type: string
        style: simple
      - explode: false
        in: path
        name: memory_id
        required: true
        schema:
          title: Memory Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Wipe Memory Point
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Wipe Memory Point
      tags:
      - Memory
      x-accepts:
      - application/json
  /memory/collections/{collection_id}/points:
    delete:
      description: Delete points in memory by filter
      operationId: wipe_memory_points_by_metadata
      parameters:
      - explode: false
        in: path
        name: collection_id
        required: true
        schema:
          title: Collection Id
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              default: {}
              title: Metadata
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Wipe Memory Points By Metadata
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Wipe Memory Points By Metadata
      tags:
      - Memory
      x-content-type: application/json
      x-accepts:
      - application/json
  /memory/conversation_history:
    delete:
      description: Delete the specified user's conversation history from working memory
      operationId: wipe_conversation_history
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Wipe Conversation History
                type: object
          description: Successful Response
      summary: Wipe Conversation History
      tags:
      - Memory
      x-accepts:
      - application/json
    get:
      description: Get the specified user's conversation history from working memory
      operationId: get_conversation_history
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Get Conversation History
                type: object
          description: Successful Response
      summary: Get Conversation History
      tags:
      - Memory
      x-accepts:
      - application/json
  /rabbithole/:
    post:
      description: |-
        Upload a file containing text (.txt, .md, .pdf, etc.). File content will be extracted and segmented into chunks.
        Chunks will be then vectorized and stored into documents memory.
      operationId: upload_file
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Body_upload_file'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Upload File
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Upload File
      tags:
      - Rabbit Hole
      x-content-type: multipart/form-data
      x-accepts:
      - application/json
  /rabbithole/web:
    post:
      description: |-
        Upload a url. Website content will be extracted and segmented into chunks.
        Chunks will be then vectorized and stored into documents memory.
      operationId: upload_url
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Body_upload_url'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Upload Url
      tags:
      - Rabbit Hole
      x-content-type: application/json
      x-accepts:
      - application/json
  /rabbithole/memory:
    post:
      description: Upload a memory json file to the cat memory
      operationId: upload_memory
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Body_upload_memory'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Upload Memory
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Upload Memory
      tags:
      - Rabbit Hole
      x-content-type: multipart/form-data
      x-accepts:
      - application/json
  /rabbithole/allowed-mimetypes:
    get:
      description: Retrieve the allowed mimetypes that can be ingested by the Rabbit
        Hole
      operationId: get_allowed_mimetypes
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Get Allowed Mimetypes
                type: object
          description: Successful Response
      summary: Get Allowed Mimetypes
      tags:
      - Rabbit Hole
      x-accepts:
      - application/json
  /admin/{page}/:
    get:
      operationId: get_injected_admin
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: Get Injected Admin
      x-accepts:
      - application/json
  /admin/{page}:
    get:
      operationId: get_injected_admin
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: Get Injected Admin
      x-accepts:
      - application/json
  /admin/:
    get:
      operationId: get_injected_admin
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: Get Injected Admin
      x-accepts:
      - application/json
components:
  schemas:
    Body_install_plugin:
      properties:
        file:
          format: binary
          title: File
          type: string
      required:
      - file
      title: Body_install_plugin
    Body_upload_file:
      properties:
        file:
          format: binary
          title: File
          type: string
        chunk_size:
          nullable: true
          type: integer
        chunk_overlap:
          nullable: true
          type: integer
      required:
      - file
      title: Body_upload_file
    Body_upload_memory:
      properties:
        file:
          format: binary
          title: File
          type: string
      required:
      - file
      title: Body_upload_memory
    Body_upload_url:
      properties:
        url:
          description: URL of the website to which you want to save the content
          title: Url
          type: string
        chunk_size:
          nullable: true
          type: integer
        chunk_overlap:
          nullable: true
          type: integer
      required:
      - url
      title: Body_upload_url
    HTTPValidationError:
      example:
        detail:
        - msg: msg
          loc:
          - ValidationError_loc_inner
          - ValidationError_loc_inner
          type: type
        - msg: msg
          loc:
          - ValidationError_loc_inner
          - ValidationError_loc_inner
          type: type
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          type: array
      title: HTTPValidationError
    SettingBody:
      example:
        name: name
        category: category
        value: "{}"
      properties:
        name:
          title: Name
          type: string
        value:
          $ref: '#/components/schemas/Value'
        category:
          nullable: true
          type: string
      required:
      - name
      - value
      title: SettingBody
    ValidationError:
      example:
        msg: msg
        loc:
        - ValidationError_loc_inner
        - ValidationError_loc_inner
        type: type
      properties:
        loc:
          items:
            $ref: '#/components/schemas/ValidationError_loc_inner'
          type: array
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
      required:
      - loc
      - msg
      - type
      title: ValidationError
    Value:
      anyOf:
      - type: object
      - items: {}
        type: array
      title: Value
    ValidationError_loc_inner:
      anyOf:
      - type: string
      - nullable: true
        type: integer


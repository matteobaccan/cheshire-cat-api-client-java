openapi: 3.1.0
info:
  description: Production ready AI assistant framework
  title: ðŸ˜¸ Cheshire-Cat API
  version: 1.8.1
  x-logo:
    url: https://cheshirecat.ai/wp-content/uploads/2023/10/Logo-Cheshire-Cat.svg
servers:
- url: /
paths:
  /:
    get:
      description: Server status
      operationId: status
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Status
                type: object
          description: Successful Response
      summary: Status
      tags:
      - Home
      x-accepts:
      - application/json
  /message:
    post:
      description: Get a response from the Cat
      operationId: message_with_cat
      requestBody:
        content:
          application/json:
            schema:
              default:
                text: hello!
              title: Payload
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatMessage'
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Message With Cat
      tags:
      - Home
      x-content-type: application/json
      x-accepts:
      - application/json
  /auth/available-permissions:
    get:
      description: Returns all available resources and permissions.
      operationId: get_available_permissions
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  items:
                    $ref: '#/components/schemas/AuthPermission'
                title: Response Get Available Permissions
          description: Successful Response
      summary: Get Available Permissions
      tags:
      - User Auth
      x-accepts:
      - application/json
  /auth/token:
    post:
      description: |-
        Endpoint called from client to get a JWT from local identity provider.
        This endpoint receives username and password as form-data, validates credentials and issues a JWT.
      operationId: auth_token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWTResponse'
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Auth Token
      tags:
      - User Auth
      x-content-type: application/json
      x-accepts:
      - application/json
  /users/:
    get:
      operationId: read_users
      parameters:
      - explode: true
        in: query
        name: skip
        required: false
        schema:
          default: 0
          title: Skip
          type: integer
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          title: Limit
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserResponse'
                type: array
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Read Users
      tags:
      - Users
      x-accepts:
      - application/json
    post:
      operationId: create_user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Create User
      tags:
      - Users
      x-content-type: application/json
      x-accepts:
      - application/json
  /users/{user_id}:
    delete:
      operationId: delete_user
      parameters:
      - explode: false
        in: path
        name: user_id
        required: true
        schema:
          title: User Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Delete User
      tags:
      - Users
      x-accepts:
      - application/json
    get:
      operationId: read_user
      parameters:
      - explode: false
        in: path
        name: user_id
        required: true
        schema:
          title: User Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Read User
      tags:
      - Users
      x-accepts:
      - application/json
    put:
      operationId: update_user
      parameters:
      - explode: false
        in: path
        name: user_id
        required: true
        schema:
          title: User Id
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Update User
      tags:
      - Users
      x-content-type: application/json
      x-accepts:
      - application/json
  /settings/:
    get:
      description: Get the entire list of settings available in the database
      operationId: get_settings
      parameters:
      - explode: true
        in: query
        name: search
        required: false
        schema:
          default: ""
          title: Search
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Settings
      tags:
      - Settings
      x-accepts:
      - application/json
    post:
      description: Create a new setting in the database
      operationId: create_setting
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SettingBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Create Setting
      tags:
      - Settings
      x-content-type: application/json
      x-accepts:
      - application/json
  /settings/{settingId}:
    delete:
      description: Delete a specific setting in the database
      operationId: delete_setting
      parameters:
      - explode: false
        in: path
        name: settingId
        required: true
        schema:
          title: Settingid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Delete Setting
      tags:
      - Settings
      x-accepts:
      - application/json
    get:
      description: Get the a specific setting from the database
      operationId: get_setting
      parameters:
      - explode: false
        in: path
        name: settingId
        required: true
        schema:
          title: Settingid
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Setting
      tags:
      - Settings
      x-accepts:
      - application/json
    put:
      description: Update a specific setting in the database if it exists
      operationId: update_setting
      parameters:
      - explode: false
        in: path
        name: settingId
        required: true
        schema:
          title: Settingid
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SettingBody'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Update Setting
      tags:
      - Settings
      x-content-type: application/json
      x-accepts:
      - application/json
  /llm/settings:
    get:
      description: Get the list of the Large Language Models
      operationId: get_llms_settings
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Get Llms Settings
                type: object
          description: Successful Response
      summary: Get Llms Settings
      tags:
      - Large Language Model
      x-accepts:
      - application/json
  /llm/settings/{languageModelName}:
    get:
      description: Get settings and schema of the specified Large Language Model
      operationId: get_llm_settings
      parameters:
      - explode: false
        in: path
        name: languageModelName
        required: true
        schema:
          title: Languagemodelname
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Get Llm Settings
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Llm Settings
      tags:
      - Large Language Model
      x-accepts:
      - application/json
    put:
      description: Upsert the Large Language Model setting
      operationId: upsert_llm_setting
      parameters:
      - explode: false
        in: path
        name: languageModelName
        required: true
        schema:
          title: Languagemodelname
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              default:
                openai_api_key: your-key-here
              title: Payload
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Upsert Llm Setting
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Upsert Llm Setting
      tags:
      - Large Language Model
      x-content-type: application/json
      x-accepts:
      - application/json
  /embedder/settings:
    get:
      description: Get the list of the Embedders
      operationId: get_embedders_settings
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Get Embedders Settings
                type: object
          description: Successful Response
      summary: Get Embedders Settings
      tags:
      - Embedder
      x-accepts:
      - application/json
  /embedder/settings/{languageEmbedderName}:
    get:
      description: Get settings and schema of the specified Embedder
      operationId: get_embedder_settings
      parameters:
      - explode: false
        in: path
        name: languageEmbedderName
        required: true
        schema:
          title: Languageembeddername
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Get Embedder Settings
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Embedder Settings
      tags:
      - Embedder
      x-accepts:
      - application/json
    put:
      description: Upsert the Embedder setting
      operationId: upsert_embedder_setting
      parameters:
      - explode: false
        in: path
        name: languageEmbedderName
        required: true
        schema:
          title: Languageembeddername
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              default:
                openai_api_key: your-key-here
              title: Payload
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Upsert Embedder Setting
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Upsert Embedder Setting
      tags:
      - Embedder
      x-content-type: application/json
      x-accepts:
      - application/json
  /plugins/:
    get:
      description: List available plugins
      operationId: get_available_plugins
      parameters:
      - explode: true
        in: query
        name: query
        required: false
        schema:
          title: Query
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Get Available Plugins
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Available Plugins
      tags:
      - Plugins
      x-accepts:
      - application/json
  /plugins/upload:
    post:
      description: Install a new plugin from a zip file
      operationId: install_plugin
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Body_install_plugin'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Install Plugin
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Install Plugin
      tags:
      - Plugins
      x-content-type: multipart/form-data
      x-accepts:
      - application/json
  /plugins/upload/registry:
    post:
      description: Install a new plugin from registry
      operationId: install_plugin_from_registry
      requestBody:
        content:
          application/json:
            schema:
              default:
                url: https://github.com/plugin-dev-account/plugin-repo
              title: Payload
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Install Plugin From Registry
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Install Plugin From Registry
      tags:
      - Plugins
      x-content-type: application/json
      x-accepts:
      - application/json
  /plugins/toggle/{plugin_id}:
    put:
      description: Enable or disable a single plugin
      operationId: toggle_plugin
      parameters:
      - explode: false
        in: path
        name: plugin_id
        required: true
        schema:
          title: Plugin Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Toggle Plugin
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Toggle Plugin
      tags:
      - Plugins
      x-accepts:
      - application/json
  /plugins/settings:
    get:
      description: Returns the settings of all the plugins
      operationId: get_plugins_settings
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Get Plugins Settings
                type: object
          description: Successful Response
      summary: Get Plugins Settings
      tags:
      - Plugins
      x-accepts:
      - application/json
  /plugins/settings/{plugin_id}:
    get:
      description: Returns the settings of a specific plugin
      operationId: get_plugin_settings
      parameters:
      - explode: false
        in: path
        name: plugin_id
        required: true
        schema:
          title: Plugin Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Get Plugin Settings
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Plugin Settings
      tags:
      - Plugins
      x-accepts:
      - application/json
    put:
      description: Updates the settings of a specific plugin
      operationId: upsert_plugin_settings
      parameters:
      - explode: false
        in: path
        name: plugin_id
        required: true
        schema:
          title: Plugin Id
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              default:
                setting_a: some value
                setting_b: another value
              title: Payload
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Upsert Plugin Settings
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Upsert Plugin Settings
      tags:
      - Plugins
      x-content-type: application/json
      x-accepts:
      - application/json
  /plugins/{plugin_id}:
    delete:
      description: Physically remove plugin.
      operationId: delete_plugin
      parameters:
      - explode: false
        in: path
        name: plugin_id
        required: true
        schema:
          title: Plugin Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Delete Plugin
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Delete Plugin
      tags:
      - Plugins
      x-accepts:
      - application/json
    get:
      description: Returns information on a single plugin
      operationId: get_plugin_details
      parameters:
      - explode: false
        in: path
        name: plugin_id
        required: true
        schema:
          title: Plugin Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Get Plugin Details
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Plugin Details
      tags:
      - Plugins
      x-accepts:
      - application/json
  /memory/recall:
    get:
      deprecated: true
      description: Search k memories similar to given text.
      operationId: recall_memory_points_from_text
      parameters:
      - description: Find memories similar to this text.
        explode: true
        in: query
        name: text
        required: true
        schema:
          description: Find memories similar to this text.
          title: Text
          type: string
        style: form
      - description: How many memories to return.
        explode: true
        in: query
        name: k
        required: false
        schema:
          default: 100
          description: How many memories to return.
          title: K
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Recall Memory Points From Text
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Recall Memory Points From Text
      tags:
      - Vector Memory - Points
      x-accepts:
      - application/json
    post:
      description: "Search k memories similar to given text with specified metadata\
        \ criteria.\n    \nExample\n----------\n```\ncollection = \"episodic\"\ncontent\
        \ = \"MIAO!\"\nmetadata = {\"custom_key\": \"custom_value\"}\nreq_json = {\n\
        \    \"content\": content,\n    \"metadata\": metadata,\n}\n# create a point\n\
        res = requests.post(\n    f\"http://localhost:1865/memory/collections/{collection}/points\"\
        , json=req_json\n)\n\n# recall with metadata\nreq_json = {\n    \"text\":\
        \ \"CAT\", \n    \"metadata\":{\"custom_key\":\"custom_value\"}\n}\nres =\
        \ requests.post(\n    f\"http://localhost:1865/memory/recall\", json=req_json\n\
        )\njson = res.json()\nprint(json)\n```"
      operationId: recall_memory_points
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Body_recall_memory_points'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Recall Memory Points
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Recall Memory Points
      tags:
      - Vector Memory - Points
      x-content-type: application/json
      x-accepts:
      - application/json
  /memory/collections/{collection_id}/points:
    delete:
      description: Delete points in memory by filter
      operationId: delete_memory_points_by_metadata
      parameters:
      - explode: false
        in: path
        name: collection_id
        required: true
        schema:
          title: Collection Id
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              default: {}
              title: Metadata
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Delete Memory Points By Metadata
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Delete Memory Points By Metadata
      tags:
      - Vector Memory - Points
      x-content-type: application/json
      x-accepts:
      - application/json
    get:
      description: "Retrieve all the points from a single collection\n\n\nExample\n\
        ----------\n```\ncollection = \"declarative\"\nres = requests.get(\n    f\"\
        http://localhost:1865/memory/collections/{collection}/points\",\n)\njson =\
        \ res.json()\npoints = json[\"points\"]\n\nfor point in points:\n    payload\
        \ = point[\"payload\"]\n    vector = point[\"vector\"]\n    print(payload)\n\
        \    print(vector)\n```\n\nExample using offset\n----------\n```\n# get all\
        \ the points with limit 10\nlimit = 10\nnext_offset = \"\"\ncollection = \"\
        declarative\"\n\nwhile True:\n    res = requests.get(\n        f\"http://localhost:1865/memory/collections/{collection}/points?limit={limit}&offset={next_offset}\"\
        ,\n    )\n    json = res.json()\n    points = json[\"points\"]\n    next_offset\
        \ = json[\"next_offset\"]\n\n    for point in points:\n        payload = point[\"\
        payload\"]\n        vector = point[\"vector\"]\n        print(payload)\n \
        \       print(vector)\n    \n    if next_offset is None:\n        break\n\
        ```"
      operationId: get_points_in_collection
      parameters:
      - explode: false
        in: path
        name: collection_id
        required: true
        schema:
          title: Collection Id
          type: string
        style: simple
      - description: How many points to return
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          description: How many points to return
          title: Limit
          type: integer
        style: form
      - description: If provided (or not empty string) - skip points with ids less
          than given `offset`
        explode: true
        in: query
        name: offset
        required: false
        schema:
          description: If provided (or not empty string) - skip points with ids less
            than given `offset`
          title: Offset
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Get Points In Collection
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Points In Collection
      tags:
      - Vector Memory - Points
      x-accepts:
      - application/json
    post:
      description: Create a point in memory
      operationId: create_memory_point
      parameters:
      - explode: false
        in: path
        name: collection_id
        required: true
        schema:
          title: Collection Id
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemoryPointBase'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemoryPoint'
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Create Memory Point
      tags:
      - Vector Memory - Points
      x-content-type: application/json
      x-accepts:
      - application/json
  /memory/collections/{collection_id}/points/{point_id}:
    delete:
      description: Delete a specific point in memory
      operationId: delete_memory_point
      parameters:
      - explode: false
        in: path
        name: collection_id
        required: true
        schema:
          title: Collection Id
          type: string
        style: simple
      - explode: false
        in: path
        name: point_id
        required: true
        schema:
          title: Point Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Delete Memory Point
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Delete Memory Point
      tags:
      - Vector Memory - Points
      x-accepts:
      - application/json
    put:
      description: |-
        Edit a point in memory


        Example
        ----------
        ```

        collection = "declarative"
        content = "MIAO!"
        metadata = {"custom_key": "custom_value"}
        req_json = {
            "content": content,
            "metadata": metadata,
        }
        # create a point
        res = requests.post(
            f"http://localhost:1865/memory/collections/{collection}/points", json=req_json
        )
        json = res.json()
        #get the id
        point_id = json["id"]
        # new point values
        content = "NEW MIAO!"
        metadata = {"custom_key": "new_custom_value"}
        req_json = {
            "content": content,
            "metadata": metadata,
        }

        # edit the point
        res = requests.put(
            f"http://localhost:1865/memory/collections/{collection}/points/{point_id}", json=req_json
        )
        json = res.json()
        print(json)
        ```
      operationId: edit_memory_point
      parameters:
      - explode: false
        in: path
        name: collection_id
        required: true
        schema:
          title: Collection Id
          type: string
        style: simple
      - explode: false
        in: path
        name: point_id
        required: true
        schema:
          title: Point Id
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemoryPointBase'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemoryPoint'
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Edit Memory Point
      tags:
      - Vector Memory - Points
      x-content-type: application/json
      x-accepts:
      - application/json
  /memory/collections:
    delete:
      description: Delete and create all collections
      operationId: wipe_collections
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Wipe Collections
                type: object
          description: Successful Response
      summary: Wipe Collections
      tags:
      - Vector Memory - Collections
      x-accepts:
      - application/json
    get:
      description: Get list of available collections
      operationId: get_collections
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Get Collections
                type: object
          description: Successful Response
      summary: Get Collections
      tags:
      - Vector Memory - Collections
      x-accepts:
      - application/json
  /memory/collections/{collection_id}:
    delete:
      description: Delete and recreate a collection
      operationId: wipe_single_collection
      parameters:
      - explode: false
        in: path
        name: collection_id
        required: true
        schema:
          title: Collection Id
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Wipe Single Collection
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Wipe Single Collection
      tags:
      - Vector Memory - Collections
      x-accepts:
      - application/json
  /memory/conversation_history:
    delete:
      description: Delete the specified user's conversation history from working memory
      operationId: wipe_conversation_history
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Wipe Conversation History
                type: object
          description: Successful Response
      summary: Wipe Conversation History
      tags:
      - Working Memory - Current Conversation
      x-accepts:
      - application/json
    get:
      description: Get the specified user's conversation history from working memory
      operationId: get_conversation_history
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Get Conversation History
                type: object
          description: Successful Response
      summary: Get Conversation History
      tags:
      - Working Memory - Current Conversation
      x-accepts:
      - application/json
  /rabbithole/:
    post:
      description: |-
        Upload a file containing text (.txt, .md, .pdf, etc.). File content will be extracted and segmented into chunks.
        Chunks will be then vectorized and stored into documents memory.

        Note
        ----------
        `chunk_size`, `chunk_overlap` anad `metadata` must be passed as form data.
        This is necessary because the HTTP protocol does not allow file uploads to be sent as JSON.

        Example
        ----------
        ```
        content_type = "application/pdf"
        file_name = "sample.pdf"
        file_path = f"tests/mocks/{file_name}"
        with open(file_path, "rb") as f:
            files = {"file": (file_name, f, content_type)}

            metadata = {
                "source": "sample.pdf",
                "title": "Test title",
                "author": "Test author",
                "year": 2020,
            }
            # upload file endpoint only accepts form-encoded data
            payload = {
                "chunk_size": 128,
                "metadata": json.dumps(metadata)
            }

            response = requests.post(
                "http://localhost:1865/rabbithole/",
                files=files,
                data=payload
            )
        ```
      operationId: upload_file
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Body_upload_file'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Upload File
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Upload File
      tags:
      - Rabbit Hole
      x-content-type: multipart/form-data
      x-accepts:
      - application/json
  /rabbithole/batch:
    post:
      description: "Batch upload multiple files containing text (.txt, .md, .pdf,\
        \ etc.). File content will be extracted and segmented into chunks.\nChunks\
        \ will be then vectorized and stored into documents memory.\n\nNote\n----------\n\
        `chunk_size`, `chunk_overlap` anad `metadata` must be passed as form data.\n\
        This is necessary because the HTTP protocol does not allow file uploads to\
        \ be sent as JSON.\n\nExample\n----------\n```\nfiles = []\nfiles_to_upload\
        \ = {\"sample.pdf\":\"application/pdf\",\"sample.txt\":\"application/txt\"\
        }\n\nfor file_name in files_to_upload:\n    content_type = files_to_upload[file_name]\n\
        \    file_path = f\"tests/mocks/{file_name}\"\n    files.append(  (\"files\"\
        , ((file_name, open(file_path, \"rb\"), content_type))) )\n\n\nmetadata =\
        \ {\n    \"sample.pdf\":{\n        \"source\": \"sample.pdf\",\n        \"\
        title\": \"Test title\",\n        \"author\": \"Test author\",\n        \"\
        year\": 2020\n    },\n    \"sample.txt\":{\n        \"source\": \"sample.txt\"\
        ,\n        \"title\": \"Test title\",\n        \"author\": \"Test author\"\
        ,\n        \"year\": 2021\n    }\n}\n    \n# upload file endpoint only accepts\
        \ form-encoded data\npayload = {\n    \"chunk_size\": 128,\n    \"metadata\"\
        : json.dumps(metadata)\n}\n\nresponse = requests.post(\n    \"http://localhost:1865/rabbithole/batch\"\
        ,\n    files=files,\n    data=payload\n)\n```"
      operationId: upload_files
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Body_upload_files'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Upload Files
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Upload Files
      tags:
      - Rabbit Hole
      x-content-type: multipart/form-data
      x-accepts:
      - application/json
  /rabbithole/web:
    post:
      description: |-
        Upload a url. Website content will be extracted and segmented into chunks.
        Chunks will be then vectorized and stored into documents memory.
      operationId: upload_url
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadURLConfig'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Upload Url
      tags:
      - Rabbit Hole
      x-content-type: application/json
      x-accepts:
      - application/json
  /rabbithole/memory:
    post:
      description: Upload a memory json file to the cat memory
      operationId: upload_memory
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Body_upload_memory'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Upload Memory
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Upload Memory
      tags:
      - Rabbit Hole
      x-content-type: multipart/form-data
      x-accepts:
      - application/json
  /rabbithole/allowed-mimetypes:
    get:
      description: Retrieve the allowed mimetypes that can be ingested by the Rabbit
        Hole
      operationId: get_allowed_mimetypes
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Get Allowed Mimetypes
                type: object
          description: Successful Response
      summary: Get Allowed Mimetypes
      tags:
      - Rabbit Hole
      x-accepts:
      - application/json
  /auth_handler/settings:
    get:
      description: Get the list of the AuthHandlers
      operationId: get_auth_handler_settings
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Get Auth Handler Settings
                type: object
          description: Successful Response
      summary: Get Auth Handler Settings
      tags:
      - AuthHandler
      x-accepts:
      - application/json
  /auth_handler/settings/{auth_handler_name}:
    get:
      description: Get the settings of a specific AuthHandler
      operationId: get_auth_handler_setting
      parameters:
      - explode: false
        in: path
        name: auth_handler_name
        required: true
        schema:
          title: Auth Handler Name
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Get Auth Handler Setting
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Get Auth Handler Setting
      tags:
      - AuthHandler
      x-accepts:
      - application/json
    put:
      description: Upsert the settings of a specific AuthHandler
      operationId: upsert_authenticator_setting
      parameters:
      - explode: false
        in: path
        name: auth_handler_name
        required: true
        schema:
          title: Auth Handler Name
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              title: Payload
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                title: Response Upsert Authenticator Setting
                type: object
          description: Successful Response
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Upsert Authenticator Setting
      tags:
      - AuthHandler
      x-content-type: application/json
      x-accepts:
      - application/json
components:
  schemas:
    AuthPermission:
      enum:
      - WRITE
      - EDIT
      - LIST
      - READ
      - DELETE
      title: AuthPermission
      type: string
    AuthResource:
      enum:
      - STATUS
      - MEMORY
      - CONVERSATION
      - SETTINGS
      - LLM
      - EMBEDDER
      - AUTH_HANDLER
      - USERS
      - UPLOAD
      - PLUGINS
      - STATIC
      title: AuthResource
      type: string
    Body_install_plugin:
      properties:
        file:
          format: binary
          title: File
          type: string
      required:
      - file
      title: Body_install_plugin
    Body_recall_memory_points:
      properties:
        text:
          description: Find memories similar to this text.
          title: Text
          type: string
        k:
          default: 100
          description: How many memories to return.
          title: K
          type: integer
        metadata:
          default: "{}"
          description: Flat dictionary where each key-value pair represents a filter.The
            memory points returned will match the specified metadata criteria.
          title: Metadata
          type: string
      required:
      - text
      title: Body_recall_memory_points
    Body_upload_file:
      properties:
        file:
          format: binary
          title: File
          type: string
        chunk_size:
          nullable: true
          type: integer
        chunk_overlap:
          nullable: true
          type: integer
        metadata:
          default: "{}"
          description: "Metadata to be stored with each chunk (e.g. author, category,\
            \ etc.). Since we are passing this along side form data, must be a JSON\
            \ string (use `json.dumps(metadata)`)."
          title: Metadata
          type: string
      required:
      - file
      title: Body_upload_file
    Body_upload_files:
      properties:
        files:
          items:
            format: binary
            type: string
          type: array
        chunk_size:
          nullable: true
          type: integer
        chunk_overlap:
          nullable: true
          type: integer
        metadata:
          default: "{}"
          description: "Metadata to be stored where each key is the name of a file\
            \ being uploaded, and the corresponding value is another dictionary containing\
            \ metadata specific to that file. Since we are passing this along side\
            \ form data, metadata must be a JSON string (use `json.dumps(metadata)`)."
          title: Metadata
          type: string
      required:
      - files
      title: Body_upload_files
    Body_upload_memory:
      properties:
        file:
          format: binary
          title: File
          type: string
      required:
      - file
      title: Body_upload_memory
    CatMessage:
      additionalProperties: {}
      description: |-
        Represents a Cat message.

        Attributes
        ----------
        type : str
            The type of message. Defaults to "chat".
        user_id : str
            Unique identifier for the user associated with the message.
        when : float
            The timestamp when the message was sent. Defaults to the current time.
        who : str
            The name of the message author.
        text : Optional[str], default=None
            The text content of the message.
        image : Optional[str], default=None
            Image file URLs or base64 data URIs that represent image associated with the message.
        audio : Optional[str], default=None
            Audio file URLs or base64 data URIs that represent audio associated with the message.
        why : Optional[MessageWhy]
            Additional contextual information related to the message.

        Notes
        -----
        - The `content` parameter and attribute are deprecated. Use `text` instead.
      example:
        image: Image
        user_id: user_id
        why:
          input: input
          memory: "{}"
          model_interactions:
          - model_type: ""
            started_at: 1.4658129805029452
            output_tokens: 5
            source: source
            reply: reply
            prompt: prompt
            input_tokens: 6
            ended_at: 5.637376656633329
          - model_type: ""
            started_at: 1.4658129805029452
            output_tokens: 5
            source: source
            reply: reply
            prompt: prompt
            input_tokens: 6
            ended_at: 5.637376656633329
          intermediate_steps:
          - ""
          - ""
        text: Text
        audio: Audio
        type: chat
        message: message
        when: 0.8008281904610115
        content: content
        who: AI
      properties:
        user_id:
          title: User Id
        when:
          title: When
        who:
          default: AI
          title: Who
        text:
          $ref: '#/components/schemas/Text'
        image:
          $ref: '#/components/schemas/Image'
        audio:
          $ref: '#/components/schemas/Audio'
        type:
          default: chat
          title: Type
        why:
          $ref: '#/components/schemas/CatMessage_why'
        message:
          description: |-
            This attribute is deprecated. Use `text` instead.

            The text content of the message. Use `text` instead.

            Returns
            -------
            str
                The text content of the message.
          readOnly: true
          title: Message
        content:
          description: |-
            This attribute is deprecated. Use `text` instead.

            The text content of the message. Use `text` instead.

            Returns
            -------
            str
                The text content of the message.
          readOnly: true
          title: Content
      required:
      - content
      - message
      - user_id
      title: CatMessage
    EmbedderModelInteraction:
      description: |-
        Represents an interaction with an embedding model.

        Inherits from ModelInteraction and includes attributes specific to embedding interactions.

        Attributes
        ----------
        model_type : Literal["embedder"]
            The type of model, which is fixed to "embedder".
        source : str
            The source of the interaction, defaulting to "recall".
        reply : List[float]
            The embeddings generated by the embedder.
      properties:
        model_type: {}
        source:
          default: recall
          title: Source
          type: string
        prompt:
          title: Prompt
          type: string
        input_tokens:
          title: Input Tokens
          type: integer
        started_at:
          title: Started At
          type: number
        reply:
          items:
            type: number
          type: array
      required:
      - input_tokens
      - prompt
      - reply
      title: EmbedderModelInteraction
    HTTPValidationError:
      example:
        detail:
        - msg: msg
          loc:
          - ValidationError_loc_inner
          - ValidationError_loc_inner
          type: type
        - msg: msg
          loc:
          - ValidationError_loc_inner
          - ValidationError_loc_inner
          type: type
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          type: array
      title: HTTPValidationError
    JWTResponse:
      example:
        access_token: access_token
        token_type: bearer
      properties:
        access_token:
          title: Access Token
          type: string
        token_type:
          default: bearer
          title: Token Type
          type: string
      required:
      - access_token
      title: JWTResponse
    LLMModelInteraction:
      description: |-
        Represents an interaction with a large language model (LLM).

        Inherits from ModelInteraction and adds specific attributes related to LLM interactions.

        Attributes
        ----------
        model_type : Literal["llm"]
            The type of model, which is fixed to "llm".
        reply : str
            The response generated by the LLM.
        output_tokens : int
            The number of output tokens generated by the LLM.
        ended_at : float
            The timestamp when the interaction ended.
      example:
        model_type: ""
        started_at: 1.4658129805029452
        output_tokens: 5
        source: source
        reply: reply
        prompt: prompt
        input_tokens: 6
        ended_at: 5.637376656633329
      properties:
        model_type: {}
        source:
          title: Source
          type: string
        prompt:
          title: Prompt
          type: string
        input_tokens:
          title: Input Tokens
          type: integer
        started_at:
          title: Started At
          type: number
        reply:
          title: Reply
          type: string
        output_tokens:
          title: Output Tokens
          type: integer
        ended_at:
          title: Ended At
          type: number
      required:
      - ended_at
      - input_tokens
      - output_tokens
      - prompt
      - reply
      - source
      title: LLMModelInteraction
    MemoryPoint:
      example:
        metadata: "{}"
        vector:
        - 0.8008281904610115
        - 0.8008281904610115
        id: id
        content: content
      properties:
        content:
          title: Content
          type: string
        metadata:
          default: "{}"
          title: Metadata
          type: string
        id:
          title: Id
          type: string
        vector:
          items:
            type: number
          type: array
      required:
      - content
      - id
      - vector
      title: MemoryPoint
    MemoryPointBase:
      example:
        metadata: "{}"
        content: content
      properties:
        content:
          title: Content
          type: string
        metadata:
          default: "{}"
          title: Metadata
          type: string
      required:
      - content
      title: MemoryPointBase
    MessageWhy:
      additionalProperties: {}
      description: "A class for encapsulating the context and reasoning behind a message,\
        \ providing details on \ninput, intermediate steps, memory, and interactions\
        \ with models.\n\nAttributes\n----------\ninput : str\n    The initial input\
        \ message that triggered the response.\nintermediate_steps : List\n    A list\
        \ capturing intermediate steps or actions taken as part of processing the\
        \ message.\nmemory : dict\n    A dictionary containing relevant memory information\
        \ used during the processing of the message.\nmodel_interactions : List[Union[LLMModelInteraction,\
        \ EmbedderModelInteraction]]\n    A list of interactions with language or\
        \ embedding models, detailing how models were used in generating \n    or\
        \ understanding the message context."
      example:
        input: input
        memory: "{}"
        model_interactions:
        - model_type: ""
          started_at: 1.4658129805029452
          output_tokens: 5
          source: source
          reply: reply
          prompt: prompt
          input_tokens: 6
          ended_at: 5.637376656633329
        - model_type: ""
          started_at: 1.4658129805029452
          output_tokens: 5
          source: source
          reply: reply
          prompt: prompt
          input_tokens: 6
          ended_at: 5.637376656633329
        intermediate_steps:
        - ""
        - ""
      properties:
        input:
          title: Input
        intermediate_steps:
          items: {}
          title: Intermediate Steps
        memory:
          title: Memory
        model_interactions:
          items:
            $ref: '#/components/schemas/Model_Interactions_inner'
          title: Model Interactions
      required:
      - input
      - intermediate_steps
      - memory
      - model_interactions
      title: MessageWhy
    SettingBody:
      example:
        name: name
        category: category
        value: "{}"
      properties:
        name:
          title: Name
          type: string
        value:
          $ref: '#/components/schemas/Value'
        category:
          nullable: true
          type: string
      required:
      - name
      - value
      title: SettingBody
    UploadURLConfig:
      additionalProperties: {}
      example:
        chunk_size: 0
        metadata: "{}"
        chunk_overlap: 6
        url: url
      properties:
        url:
          description: URL of the website to which you want to save the content
          title: Url
        chunk_size:
          $ref: '#/components/schemas/Chunk_Size'
        chunk_overlap:
          $ref: '#/components/schemas/Chunk_Overlap'
        metadata:
          default: "{}"
          description: "Metadata to be stored with each chunk (e.g. author, category,\
            \ etc.)"
          title: Metadata
      required:
      - url
      title: UploadURLConfig
    UserCreate:
      additionalProperties: {}
      example:
        password: password
        permissions:
          key:
          - WRITE
          - WRITE
        username: username
      properties:
        username:
          minLength: 2
          title: Username
        permissions:
          additionalProperties:
            items:
              $ref: '#/components/schemas/AuthPermission'
          default:
            CONVERSATION:
            - WRITE
            - EDIT
            - LIST
            - READ
            - DELETE
            MEMORY:
            - READ
            - LIST
            STATIC:
            - READ
            STATUS:
            - READ
          title: Permissions
        password:
          minLength: 5
          title: Password
      required:
      - password
      - username
      title: UserCreate
    UserCredentials:
      example:
        password: password
        username: username
      properties:
        username:
          title: Username
          type: string
        password:
          title: Password
          type: string
      required:
      - password
      - username
      title: UserCredentials
    UserResponse:
      example:
        permissions:
          key:
          - WRITE
          - WRITE
        id: id
        username: username
      properties:
        username:
          minLength: 2
          title: Username
          type: string
        permissions:
          additionalProperties:
            items:
              $ref: '#/components/schemas/AuthPermission'
          default:
            CONVERSATION:
            - WRITE
            - EDIT
            - LIST
            - READ
            - DELETE
            MEMORY:
            - READ
            - LIST
            STATIC:
            - READ
            STATUS:
            - READ
          title: Permissions
        id:
          title: Id
          type: string
      required:
      - id
      - username
      title: UserResponse
    UserUpdate:
      additionalProperties: {}
      example:
        password: password
        permissions:
          key:
          - WRITE
          - WRITE
        username: username
      properties:
        username:
          minLength: 2
          title: Username
          type: string
        permissions:
          additionalProperties:
            items:
              $ref: '#/components/schemas/AuthPermission'
          title: Permissions
        password:
          minLength: 4
          title: Password
      title: UserUpdate
    ValidationError:
      example:
        msg: msg
        loc:
        - ValidationError_loc_inner
        - ValidationError_loc_inner
        type: type
      properties:
        loc:
          items:
            $ref: '#/components/schemas/ValidationError_loc_inner'
          type: array
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
      required:
      - loc
      - msg
      - type
      title: ValidationError
    Text:
      anyOf:
      - {}
      - nullable: true
      title: Text
    Image:
      anyOf:
      - nullable: true
        type: string
      - nullable: true
      title: Image
    Audio:
      anyOf:
      - nullable: true
        type: string
      - nullable: true
      title: Audio
    CatMessage_why:
      anyOf:
      - $ref: '#/components/schemas/MessageWhy'
      - nullable: true
    Model_Interactions_inner:
      anyOf:
      - $ref: '#/components/schemas/LLMModelInteraction'
      - $ref: '#/components/schemas/EmbedderModelInteraction'
    Value:
      anyOf:
      - type: object
      - items: {}
        type: array
      title: Value
    Chunk_Size:
      anyOf:
      - nullable: true
        type: integer
      description: Maximum length of each chunk after the document is split (in tokens)
      title: Chunk Size
    Chunk_Overlap:
      anyOf:
      - nullable: true
        type: integer
      description: Chunk overlap (in tokens)
      title: Chunk Overlap
    ValidationError_loc_inner:
      anyOf:
      - nullable: true
        type: string
      - nullable: true
        type: integer


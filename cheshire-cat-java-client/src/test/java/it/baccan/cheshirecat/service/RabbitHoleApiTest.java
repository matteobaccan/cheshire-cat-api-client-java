/*
 * ðŸ˜¸ Cheshire-Cat API
 * Production ready AI assistant framework
 *
 * The version of the OpenAPI document: 1.7.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package it.baccan.cheshirecat.service;

import it.baccan.cheshirecat.*;
import it.baccan.cheshirecat.auth.*;
import java.io.File;
import it.baccan.cheshirecat.model.HTTPValidationError;
import it.baccan.cheshirecat.model.UploadURLConfig;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RabbitHoleApi
 */
public class RabbitHoleApiTest {

    private final RabbitHoleApi api = new RabbitHoleApi();

    /**
     * Get Allowed Mimetypes
     *
     * Retrieve the allowed mimetypes that can be ingested by the Rabbit Hole
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllowedMimetypesTest() throws ApiException {
        //Object response = api.getAllowedMimetypes();
        // TODO: test validations
    }

    /**
     * Upload File
     *
     * Upload a file containing text (.txt, .md, .pdf, etc.). File content will be extracted and segmented into chunks. Chunks will be then vectorized and stored into documents memory.  Note ---------- &#x60;chunk_size&#x60;, &#x60;chunk_overlap&#x60; anad &#x60;metadata&#x60; must be passed as form data. This is necessary because the HTTP protocol does not allow file uploads to be sent as JSON.  Example ---------- &#x60;&#x60;&#x60; content_type &#x3D; \&quot;application/pdf\&quot; file_name &#x3D; \&quot;sample.pdf\&quot; file_path &#x3D; f\&quot;tests/mocks/{file_name}\&quot; with open(file_path, \&quot;rb\&quot;) as f:     files &#x3D; {\&quot;file\&quot;: (file_name, f, content_type)}      metadata &#x3D; {         \&quot;source\&quot;: \&quot;sample.pdf\&quot;,         \&quot;title\&quot;: \&quot;Test title\&quot;,         \&quot;author\&quot;: \&quot;Test author\&quot;,         \&quot;year\&quot;: 2020,     }     # upload file endpoint only accepts form-encoded data     payload &#x3D; {         \&quot;chunk_size\&quot;: 128,         \&quot;metadata\&quot;: json.dumps(metadata)     }      response &#x3D; requests.post(         \&quot;http://localhost:1865/rabbithole/\&quot;,         files&#x3D;files,         data&#x3D;payload     ) &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadFileTest() throws ApiException {
        //File _file = null;
        //Integer chunkSize = null;
        //Integer chunkOverlap = null;
        //String metadata = null;
        //Object response = api.uploadFile(_file, chunkSize, chunkOverlap, metadata);
        // TODO: test validations
    }

    /**
     * Upload Memory
     *
     * Upload a memory json file to the cat memory
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadMemoryTest() throws ApiException {
        //File _file = null;
        //Object response = api.uploadMemory(_file);
        // TODO: test validations
    }

    /**
     * Upload Url
     *
     * Upload a url. Website content will be extracted and segmented into chunks. Chunks will be then vectorized and stored into documents memory.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadUrlTest() throws ApiException {
        //UploadURLConfig uploadURLConfig = null;
        //Object response = api.uploadUrl(uploadURLConfig);
        // TODO: test validations
    }

}

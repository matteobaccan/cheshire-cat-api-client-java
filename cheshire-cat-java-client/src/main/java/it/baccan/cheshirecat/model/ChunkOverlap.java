/*
 * ðŸ˜¸ Cheshire-Cat API
 * Production ready AI assistant framework
 *
 * The version of the OpenAPI document: 1.7.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package it.baccan.cheshirecat.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import it.baccan.cheshirecat.JSON;


import javax.ws.rs.core.GenericType;
import javax.ws.rs.core.Response;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import it.baccan.cheshirecat.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
@JsonDeserialize(using=ChunkOverlap.ChunkOverlapDeserializer.class)
@JsonSerialize(using = ChunkOverlap.ChunkOverlapSerializer.class)
public class ChunkOverlap extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(ChunkOverlap.class.getName());

    public static class ChunkOverlapSerializer extends StdSerializer<ChunkOverlap> {
        public ChunkOverlapSerializer(Class<ChunkOverlap> t) {
            super(t);
        }

        public ChunkOverlapSerializer() {
            this(null);
        }

        @Override
        public void serialize(ChunkOverlap value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonProcessingException {
            jgen.writeObject(value.getActualInstance());
        }
    }

    public static class ChunkOverlapDeserializer extends StdDeserializer<ChunkOverlap> {
        public ChunkOverlapDeserializer() {
            this(ChunkOverlap.class);
        }

        public ChunkOverlapDeserializer(Class<?> vc) {
            super(vc);
        }

        @Override
        public ChunkOverlap deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode tree = jp.readValueAsTree();

            Object deserialized = null;
            // deserialize Integer
            try {
                deserialized = tree.traverse(jp.getCodec()).readValueAs(Integer.class);
                ChunkOverlap ret = new ChunkOverlap();
                ret.setActualInstance(deserialized);
                return ret;
            } catch (Exception e) {
                // deserialization failed, continue, log to help debugging
                log.log(Level.FINER, "Input data does not match 'ChunkOverlap'", e);
            }

            // deserialize ModelNull
            try {
                deserialized = tree.traverse(jp.getCodec()).readValueAs(ModelNull.class);
                ChunkOverlap ret = new ChunkOverlap();
                ret.setActualInstance(deserialized);
                return ret;
            } catch (Exception e) {
                // deserialization failed, continue, log to help debugging
                log.log(Level.FINER, "Input data does not match 'ChunkOverlap'", e);
            }

            throw new IOException(String.format("Failed deserialization for ChunkOverlap: no match found"));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public ChunkOverlap getNullValue(DeserializationContext ctxt) throws JsonMappingException {
            return null;
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, GenericType<?>> schemas = new HashMap<>();

    public ChunkOverlap() {
        super("anyOf", Boolean.TRUE);
    }

    public ChunkOverlap(Integer o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public ChunkOverlap(ModelNull o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("Integer", new GenericType<Integer>() {
        });
        JSON.registerDescendants(ChunkOverlap.class, Collections.unmodifiableMap(schemas));
    }

    @Override
    public Map<String, GenericType<?>> getSchemas() {
        return ChunkOverlap.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * Integer
     *
     * It could be an instance of the 'anyOf' schemas.
     * The anyOf child schemas may themselves be a composed schema (allOf, anyOf, anyOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance == null) {
           super.setActualInstance(instance);
           return;
        }

        if (JSON.isInstanceOf(Integer.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        if (JSON.isInstanceOf(ModelNull.class, instance, new HashSet<>())) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be Integer");
    }

    /**
     * Get the actual instance, which can be the following:
     * Integer
     *
     * @return The actual instance (Integer)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `Integer`. If the actual instance is not `Integer`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Integer`
     * @throws ClassCastException if the instance is not `Integer`
     */
    public Integer getInteger() throws ClassCastException {
        return (Integer)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ModelNull`. If the actual instance is not `ModelNull`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ModelNull`
     * @throws ClassCastException if the instance is not `ModelNull`
     */
    public ModelNull getModelNull() throws ClassCastException {
        return (ModelNull)super.getActualInstance();
    }

}


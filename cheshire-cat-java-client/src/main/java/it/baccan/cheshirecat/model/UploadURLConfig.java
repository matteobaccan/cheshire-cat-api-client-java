/*
 * ðŸ˜¸ Cheshire-Cat API
 * Production ready AI assistant framework
 *
 * The version of the OpenAPI document: 1.7.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package it.baccan.cheshirecat.model;

import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import it.baccan.cheshirecat.model.ChunkOverlap;
import it.baccan.cheshirecat.model.ChunkSize;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import it.baccan.cheshirecat.JSON;


/**
 * UploadURLConfig
 */
@JsonPropertyOrder({
  UploadURLConfig.JSON_PROPERTY_URL,
  UploadURLConfig.JSON_PROPERTY_CHUNK_SIZE,
  UploadURLConfig.JSON_PROPERTY_CHUNK_OVERLAP,
  UploadURLConfig.JSON_PROPERTY_METADATA
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.10.0")
public class UploadURLConfig {
  public static final String JSON_PROPERTY_URL = "url";
  @javax.annotation.Nonnull
  private String url;

  public static final String JSON_PROPERTY_CHUNK_SIZE = "chunk_size";
  @javax.annotation.Nullable
  private ChunkSize chunkSize;

  public static final String JSON_PROPERTY_CHUNK_OVERLAP = "chunk_overlap";
  @javax.annotation.Nullable
  private ChunkOverlap chunkOverlap;

  public static final String JSON_PROPERTY_METADATA = "metadata";
  @javax.annotation.Nullable
  private Object metadata = {};

  public UploadURLConfig() { 
  }

  public UploadURLConfig url(@javax.annotation.Nonnull String url) {
    this.url = url;
    return this;
  }

  /**
   * URL of the website to which you want to save the content
   * @return url
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUrl() {
    return url;
  }


  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUrl(@javax.annotation.Nonnull String url) {
    this.url = url;
  }


  public UploadURLConfig chunkSize(@javax.annotation.Nullable ChunkSize chunkSize) {
    this.chunkSize = chunkSize;
    return this;
  }

  /**
   * Get chunkSize
   * @return chunkSize
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CHUNK_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ChunkSize getChunkSize() {
    return chunkSize;
  }


  @JsonProperty(JSON_PROPERTY_CHUNK_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChunkSize(@javax.annotation.Nullable ChunkSize chunkSize) {
    this.chunkSize = chunkSize;
  }


  public UploadURLConfig chunkOverlap(@javax.annotation.Nullable ChunkOverlap chunkOverlap) {
    this.chunkOverlap = chunkOverlap;
    return this;
  }

  /**
   * Get chunkOverlap
   * @return chunkOverlap
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CHUNK_OVERLAP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ChunkOverlap getChunkOverlap() {
    return chunkOverlap;
  }


  @JsonProperty(JSON_PROPERTY_CHUNK_OVERLAP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChunkOverlap(@javax.annotation.Nullable ChunkOverlap chunkOverlap) {
    this.chunkOverlap = chunkOverlap;
  }


  public UploadURLConfig metadata(@javax.annotation.Nullable Object metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Metadata to be stored with each chunk (e.g. author, category, etc.)
   * @return metadata
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getMetadata() {
    return metadata;
  }


  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadata(@javax.annotation.Nullable Object metadata) {
    this.metadata = metadata;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   */
  @JsonAnySetter
  public UploadURLConfig putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   */
  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }

  /**
   * Return true if this UploadURLConfig object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UploadURLConfig uploadURLConfig = (UploadURLConfig) o;
    return Objects.equals(this.url, uploadURLConfig.url) &&
        Objects.equals(this.chunkSize, uploadURLConfig.chunkSize) &&
        Objects.equals(this.chunkOverlap, uploadURLConfig.chunkOverlap) &&
        Objects.equals(this.metadata, uploadURLConfig.metadata)&&
        Objects.equals(this.additionalProperties, uploadURLConfig.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, chunkSize, chunkOverlap, metadata, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UploadURLConfig {\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    chunkSize: ").append(toIndentedString(chunkSize)).append("\n");
    sb.append("    chunkOverlap: ").append(toIndentedString(chunkOverlap)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

